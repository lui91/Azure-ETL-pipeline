{
	"name": "transform",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "messages_dataset",
						"type": "DatasetReference"
					},
					"name": "MessagesSource"
				},
				{
					"dataset": {
						"referenceName": "categories_dataset",
						"type": "DatasetReference"
					},
					"name": "CategoriesSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "PostgreFactTweet",
						"type": "DatasetReference"
					},
					"name": "DisasterDataSink"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "parse1"
				},
				{
					"name": "CategoriesColumnCreation"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"parameters{",
				"     var_date_key as integer (0),",
				"     var_tweet_key as integer (0),",
				"     var_provider_key as integer (0)",
				"}",
				"source(output(",
				"          id as integer,",
				"          message as string,",
				"          original as string,",
				"          genre as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> MessagesSource",
				"source(output(",
				"          id as integer,",
				"          categories as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CategoriesSource",
				"MessagesSource, CategoriesSource join(MessagesSource@id == CategoriesSource@id,",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1 parse(categories_separated = categories ? (related as string,",
				"          request as string,",
				"          offer as string,",
				"          aid_related as string,",
				"          medical_help as string,",
				"          medical_products as string,",
				"          search_and_rescue as string,",
				"          security as string,",
				"          military as string,",
				"          child_alone as string,",
				"          water as string,",
				"          food as string,",
				"          shelter as string,",
				"          clothing as string,",
				"          money as string,",
				"          missing_people as string,",
				"          refugees as string,",
				"          death as string,",
				"          other_aid as string,",
				"          infrastructure_related as string,",
				"          transport as string,",
				"          buildings as string,",
				"          electricity as string,",
				"          tools as string,",
				"          hospitals as string,",
				"          shops as string,",
				"          aid_centers as string,",
				"          other_infrastructure as string,",
				"          weather_related as string,",
				"          floods as string,",
				"          storm as string,",
				"          fire as string,",
				"          earthquake as string,",
				"          cold as string,",
				"          other_weather as string,",
				"          direct_report as string),",
				"     format: 'delimited',",
				"     columnNamesAsHeader: false,",
				"     columnDelimiter: ';',",
				"     nullValue: '') ~> parse1",
				"parse1 derive(related = toInteger(split(categories_separated.aid_related, '-')[2]),",
				"          request = toInteger(split(categories_separated.request, '-')[2]),",
				"          offer = toInteger(split(categories_separated.offer, '-')[2]),",
				"          aid_related = toInteger(split(categories_separated.aid_related, '-')[2]),",
				"          medical_help = toInteger(split(categories_separated.medical_help, '-')[2]),",
				"          medical_products = toInteger(split(categories_separated.medical_products, '-')[2]),",
				"          search_and_rescue = toInteger(split(categories_separated.search_and_rescue, '-')[2]),",
				"          security = toInteger(split(categories_separated.security, '-')[2]),",
				"          military = toInteger(split(categories_separated.military, '-')[2]),",
				"          child_alone = toInteger(split(categories_separated.child_alone, '-')[2]),",
				"          water = toInteger(split(categories_separated.water, '-')[2]),",
				"          food = toInteger(split(categories_separated.food, '-')[2]),",
				"          shelter = toInteger(split(categories_separated.shelter, '-')[2]),",
				"          clothing = toInteger(split(categories_separated.clothing, '-')[2]),",
				"          money = toInteger(split(categories_separated.money, '-')[2]),",
				"          missing_people = toInteger(split(categories_separated.missing_people, '-')[2]),",
				"          refugees = toInteger(split(categories_separated.refugees, '-')[2]),",
				"          death = toInteger(split(categories_separated.death, '-')[2]),",
				"          other_aid = toInteger(split(categories_separated.other_aid, '-')[2]),",
				"          infrastructure_related = toInteger(split(categories_separated.infrastructure_related, '-')[2]),",
				"          transport = toInteger(split(categories_separated.transport, '-')[2]),",
				"          buildings = toInteger(split(categories_separated.buildings, '-')[2]),",
				"          electricity = toInteger(split(categories_separated.electricity, '-')[2]),",
				"          tools = toInteger(split(categories_separated.tools, '-')[2]),",
				"          hospitals = toInteger(split(categories_separated.hospitals, '-')[2]),",
				"          shops = toInteger(split(categories_separated.shops, '-')[2]),",
				"          aid_centers = toInteger(split(categories_separated.aid_centers, '-')[2]),",
				"          other_infrastructure = toInteger(split(categories_separated.other_infrastructure, '-')[2]),",
				"          weather_related = toInteger(split(categories_separated.weather_related, '-')[2]),",
				"          floods = toInteger(split(categories_separated.floods, '-')[2]),",
				"          storm = toInteger(split(categories_separated.storm, '-')[2]),",
				"          fire = toInteger(split(categories_separated.fire, '-')[2]),",
				"          earthquake = toInteger(split(categories_separated.earthquake, '-')[2]),",
				"          cold = toInteger(split(categories_separated.cold, '-')[2]),",
				"          other_weather = toInteger(split(categories_separated.other_weather, '-')[2]),",
				"          direct_report = toInteger(split(categories_separated.direct_report, '-')[2])) ~> CategoriesColumnCreation",
				"join1 select(mapColumn(",
				"          alt_id = MessagesSource@id,",
				"          message,",
				"          original,",
				"          genre,",
				"          categories",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"CategoriesColumnCreation derive(tweet_key = $var_tweet_key,",
				"          date_key = $var_date_key,",
				"          provider_key = $var_provider_key) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          date_key,",
				"          tweet_key,",
				"          provider_key,",
				"          alt_id,",
				"          message,",
				"          original,",
				"          genre,",
				"          related,",
				"          request,",
				"          offer,",
				"          aid_related,",
				"          medical_help,",
				"          medical_products,",
				"          search_and_rescue,",
				"          security,",
				"          military,",
				"          child_alone,",
				"          water,",
				"          food,",
				"          shelter,",
				"          clothing,",
				"          money,",
				"          missing_people,",
				"          refugees,",
				"          death,",
				"          other_aid,",
				"          infrastructure_related,",
				"          transport,",
				"          buildings,",
				"          electricity,",
				"          tools,",
				"          hospitals,",
				"          shops,",
				"          aid_centers,",
				"          other_infrastructure,",
				"          weather_related,",
				"          floods,",
				"          storm,",
				"          fire,",
				"          earthquake,",
				"          cold,",
				"          other_weather,",
				"          direct_report",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          date_key as integer,",
				"          tweet_key as integer,",
				"          provider_key as integer,",
				"          alt_id as integer,",
				"          message as string,",
				"          original as string,",
				"          genre as string,",
				"          related as integer,",
				"          request as integer,",
				"          offer as integer,",
				"          aid_related as integer,",
				"          medical_help as integer,",
				"          medical_products as integer,",
				"          search_and_rescue as integer,",
				"          security as integer,",
				"          military as integer,",
				"          child_alone as integer,",
				"          water as integer,",
				"          food as integer,",
				"          shelter as integer,",
				"          clothing as integer,",
				"          money as integer,",
				"          missing_people as integer,",
				"          refugees as integer,",
				"          death as integer,",
				"          other_aid as integer,",
				"          infrastructure_related as integer,",
				"          transport as integer,",
				"          buildings as integer,",
				"          electricity as integer,",
				"          tools as integer,",
				"          hospitals as integer,",
				"          shops as integer,",
				"          aid_centers as integer,",
				"          other_infrastructure as integer,",
				"          weather_related as integer,",
				"          floods as integer,",
				"          storm as integer,",
				"          fire as integer,",
				"          earthquake as integer,",
				"          cold as integer,",
				"          other_weather as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DisasterDataSink"
			]
		}
	}
}